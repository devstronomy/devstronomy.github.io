{"version":3,"sources":["components/data-loader-json.tsx","components/Satellites.tsx","components/Planets.tsx","links.tsx","components/Datasets.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["callbacks","loadAllPlanets","callBack","planets","loadSatellites","planet","satellites","filter","s","planetId","id","loadAllSatellites","Satellites","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","units","GM","react_default","a","createElement","Mean Radius","Mean Density","Magnitude","rowClassName","_ref","index","columnHeader","column","className","dataLoader","setSatellites","setState","sortRawData","nOfSatellitesCallback","length","sort","_ref2","sortBy","sortDirection","sortedSatellites","sortList","state","sortedSats","sat","undefined","List","update","SortDirection","DESC","reverse","prevProps","_this2","es","width","height","headerHeight","rowHeight","rowCount","size","rowGetter","_ref3","get","label","dataKey","React","Component","Planets","_React$Component","Mass","Diameter","Density","Gravity","Escape Velocity","Rotation Period","Length of Day","Distance from Sun","Perihelion","Aphelion","Orbital Period","Orbital Velocity","Orbital Inclination","Orbital Eccentricity","Obliquity to Orbit","Mean Temperature","Surface Pressure","Number of Moons","Ring System?","Global Magnetic Field?","selectPlanet","selectedPlanet","nOfSatellites","sortedPlanets","inherits","createClass","key","value","satellitesHeader","planetName","name","showAllButton","onClick","planetSpan","onRowClick","rowData","components_Satellites","_this3","data","links","jpl","href","gitHubLink","relPath","fileName","github","planetCsvLink","planetJsonLink","satellitesCsvLink","satellitesJsonLink","datasetsSql","Datasets","lib","to","Links","align","theme","createMuiTheme","palette","type","primary","main","grey","secondary","amber","PlanetsContent","Link","Planets_Planets","DatasetsContent","components_Datasets","withStyles","root","flexGrow","grow","launchIcon","color","classes","HashRouter","core_styles","AppBar_default","position","Toolbar_default","variant","Button_default","button","component","assign","target","Launch_default","Route","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7dd18d97.chunk.js","sourcesContent":["import planets from './../data/planets.json';\nimport satellites from './../data/satellites.json';\nimport ICallbacks from './data-loaders.jsx';\n\nconst callbacks: ICallbacks = {\n\n  // Loads all planets in the Solar System.\n  loadAllPlanets: callBack => {\n    callBack(planets);\n  },\n\n  // Loads satellites belonging to the given planet.\n  loadSatellites: (planet, callBack) => {\n    callBack(satellites.filter(s => s.planetId === planet.id));\n  },\n\n  // Loads satellites of all planets in the Solar System.\n  loadAllSatellites: callBack => {\n    callBack(satellites);\n  }\n\n};\n\nexport default callbacks;\n","import React from 'react';\nimport { Column, Table, Index, SortDirectionType, SortDirection } from 'react-virtualized';\nimport { IPlanet } from './Planets';\nimport { List } from 'immutable';\nimport dataLoader from './data-loader-json'\n\nexport interface ISatellite {\n  id: number;\n}\n\ninterface Props {\n  planet: IPlanet | null;\n  nOfSatellitesCallback(n: number): void;\n}\n\ninterface State {\n  sortBy?: string;\n  sortDirection?: SortDirectionType;\n  satellites: List<ISatellite>;\n}\n\nclass Satellites extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      satellites: List()\n    }\n  }\n\n  componentDidMount() {\n    this.loadAllSatellites();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.planet !== this.props.planet) {\n      this.loadSatellites(this.props.planet);\n    }\n  }\n\n  // Maps column name to its unit.\n  units: { [unitId: string]: JSX.Element } = {\n    'GM': <span>km<sup>3</sup>/sec<sup>2</sup></span>,\n    'Mean Radius': <span>km</span>,\n    'Mean Density': <span>g/cm<sup>3</sup></span>,\n    'Magnitude': <span>V<sub>0</sub> or R</span>,\n  };\n\n  private rowClassName = ({ index }: Index): string => {\n    return index % 2 === 0 ? 'oddRow' : '';\n  };\n\n  private columnHeader = (column: string): React.ReactNode => {\n    return <span>{column}<br /><span className='unit'>({this.units[column]})</span></span>;\n  };\n\n  render(): React.ReactNode {\n    const sortDirection = this.state.sortDirection;\n    const sortBy = this.state.sortBy;\n\n    return (\n      <Table width={575}\n        height={514}\n        headerHeight={90}\n        rowHeight={40}\n        rowCount={this.state.satellites.size}\n        rowGetter={({ index }: Index) => this.state.satellites.get(index)}\n        rowClassName={this.rowClassName}\n        sort={this.sort}\n        sortBy={sortBy}\n        sortDirection={sortDirection}\n      >\n        <Column label='Name' dataKey='name' width={105} className='main-column' />\n        <Column label={this.columnHeader('GM')} dataKey='gm' width={95} />\n        <Column label={this.columnHeader('Mean Radius')} dataKey='radius' width={75} />\n        <Column label={this.columnHeader('Mean Density')} dataKey='density' width={75} />\n        <Column label={this.columnHeader('Magnitude')} dataKey='magnitude' width={105} />\n        <Column label='Geometric Albedo' dataKey='albedo' width={100} />\n      </Table>\n    );\n  }\n\n  private loadAllSatellites = () => {\n    dataLoader.loadAllSatellites(this.setSatellites);\n  }\n\n  private loadSatellites = (planet: IPlanet | null): void => {\n    if (planet === null) {\n      this.loadAllSatellites();\n    } else {\n      dataLoader.loadSatellites(planet, this.setSatellites);\n    }\n  }\n\n  private setSatellites = (satellites: ISatellite[]): void => {\n    this.setState({\n      satellites: this.sortRawData(satellites)\n    });\n    this.props.nOfSatellitesCallback(satellites.length);\n  }\n\n  // TODO: get rid of duplicated code for sorting routines.\n  private sort = ({ sortBy, sortDirection }: { sortBy: string, sortDirection: SortDirectionType }) => {\n    const sortedSatellites = this.sortList(sortBy, sortDirection, this.state.satellites);\n    this.setState({ sortBy, sortDirection, satellites: sortedSatellites });\n  }\n\n  private sortList = (sortBy: string, sortDirection: SortDirectionType, satellites: List<ISatellite>): List<ISatellite> => {\n    const sortedSats = satellites.sortBy(sat => sat === undefined ? '' : sat[sortBy]);\n    return List<ISatellite>(sortedSats).update(\n      sortedSats => (sortDirection === SortDirection.DESC ? List(sortedSats.reverse()) : sortedSats),\n    );\n  }\n\n  private sortRawData = (satellites: ISatellite[]): List<ISatellite> => {\n    return this.state.sortBy && this.state.sortDirection\n      ? this.sortList(this.state.sortBy, this.state.sortDirection, List(satellites))\n      : List(satellites);\n  }\n\n};\n\nexport default Satellites;\n\n","import React from 'react';\nimport Satellites from './Satellites'\nimport { Column, Table, SortDirectionType, SortDirection, Index } from 'react-virtualized';\nimport dataLoader from './data-loader-json'\n\n// styles\nimport '../css-react-virtualized/styles.css'; // only needs to be imported once\nimport '../css/components/table.css';\nimport '../css/index.css';\nimport { List } from 'immutable';\n\nexport interface IPlanet {\n  id: number;\n  name: string;\n}\n\ninterface State {\n  planets: List<IPlanet>;\n  selectedPlanet: IPlanet | null;\n  nOfSatellites: number;\n  sortBy?: string;\n  sortDirection?: SortDirectionType;\n}\n\nexport class Planets extends React.Component<{}, State> {\n\n  // Maps column name to its unit.\n  units: { [unitId: string]: JSX.Element } = {\n    'Mass': <span>10<sup>24</sup>kg</span>,\n    'Diameter': <span>km</span>,\n    'Density': <span>kg/m<sup>3</sup></span>,\n    'Gravity': <span>m/s<sup>2</sup></span>,\n    'Escape Velocity': <span>km/s</span>,\n    'Rotation Period': <span>hours</span>,\n    'Length of Day': <span>hours</span>,\n    'Distance from Sun': <span>10<sup>6</sup> km</span>,\n    'Perihelion': <span>10<sup>6</sup> km</span>,\n    'Aphelion': <span>10<sup>6</sup> km</span>,\n    'Orbital Period': <span>days</span>,\n    'Orbital Velocity': <span>km/s</span>,\n    'Orbital Inclination': <span>degrees</span>,\n    'Orbital Eccentricity': <span></span>,\n    'Obliquity to Orbit': <span>degrees</span>,\n    'Mean Temperature': <span>C</span>,\n    'Surface Pressure': <span>bars</span>,\n    'Number of Moons': <span>number</span>,\n    'Ring System?': <span>Yes/No</span>,\n    'Global Magnetic Field?': <span>Yes/No</span>,\n  }\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      planets: List(),\n      selectedPlanet: null,\n      nOfSatellites: 0,\n    }\n  }\n\n  private selectPlanet = (planet: IPlanet): void => {\n    // If the same planet is selected again, deselect it.\n    this.setState({ selectedPlanet: planet === this.state.selectedPlanet ? null : planet })\n  }\n\n  private rowClassName = ({ index }: Index): string => {\n    if (index === -1) {\n      return '';\n    }\n    if (this.state.selectedPlanet === this.state.planets.get(index)) {\n      return 'selectedRow';\n    }\n    if (index % 2 === 0) {\n      return 'oddRow';\n    }\n    return '';\n  }\n\n  /**\n   * @param {string} column column ID. Must be key in the 'units' dictionary.\n   * @returns generated node containing given text together with its unit.\n   */\n  private columnHeader = (column: string): React.ReactNode => {\n    return <span>{column}<br /><span className='unit'>({this.units[column]})</span></span>\n  }\n\n  private nOfSatellitesCallback = (nOfSatellites: number): void => {\n    this.setState({\n      nOfSatellites: nOfSatellites,\n    });\n  }\n\n  render(): React.ReactNode {\n    const selectedPlanet = this.state.selectedPlanet;\n    const nOfSatellites = this.state.nOfSatellites;\n    const planetName = selectedPlanet === null ? null : selectedPlanet.name;\n    const sortDirection = this.state.sortDirection;\n    const sortBy = this.state.sortBy;\n    const showAllButton = selectedPlanet\n      ? <span> (<button className='ahref' onClick={() => this.loadAllSatellites()}>show all satellites</button>)</span>\n      : ' (select a planet above to filter satellites)';\n\n    const planetSpan = <span className='header-highlight'>{planetName}</span>\n    let satellitesHeader;\n    if (nOfSatellites === 0) {\n      satellitesHeader = <span>Planet {planetSpan} does not have any satellites</span>\n    } else { // render table with satellites\n      satellitesHeader = planetName === null\n        ? 'Satellites of all planets'\n        : <span>Satellites of planet {planetSpan}</span>\n    }\n    satellitesHeader = <span><span className='header'>{satellitesHeader}</span><span> ({nOfSatellites} shown)</span></span>\n\n    return (\n      <div>\n\n        <span className='header'>Planets of our Solar System</span>\n\n        <Table width={1950}\n          height={450}\n          headerHeight={90}\n          rowHeight={40}\n          rowCount={this.state.planets.size}\n          rowGetter={({ index }: Index) => this.state.planets.get(index)}\n          rowClassName={this.rowClassName}\n          onRowClick={(props: any) => this.selectPlanet(props.rowData)}\n          sort={this.sort}\n          sortBy={sortBy}\n          sortDirection={sortDirection}\n        >\n          <Column label='Name' dataKey='name' width={70} className='main-column' />\n          <Column label={this.columnHeader('Distance from Sun')} dataKey='distanceFromSun' width={80} />\n          <Column label='Moons' dataKey='numberOfMoons' width={70} />\n          <Column label={this.columnHeader('Mass')} dataKey='mass' width={70} />\n          <Column label={this.columnHeader('Diameter')} dataKey='diameter' width={90} />\n          <Column label={this.columnHeader('Density')} dataKey='density' width={70} />\n          <Column label={this.columnHeader('Gravity')} dataKey='gravity' width={70} />\n          <Column label={this.columnHeader('Escape Velocity')} dataKey='escapeVelocity' width={80} />\n          <Column label={this.columnHeader('Rotation Period')} dataKey='rotationPeriod' width={80} />\n          <Column label={this.columnHeader('Length of Day')} dataKey='lengthOfDay' width={80} />\n          <Column label={this.columnHeader('Perihelion')} dataKey='perihelion' width={100} />\n          <Column label={this.columnHeader('Aphelion')} dataKey='aphelion' width={90} />\n          <Column label={this.columnHeader('Orbital Period')} dataKey='orbitalPeriod' width={70} />\n          <Column label={this.columnHeader('Orbital Velocity')} dataKey='orbitalVelocity' width={80} />\n          <Column label={this.columnHeader('Orbital Inclination')} dataKey='orbitalInclination' width={100} />\n          <Column label='Orbital Eccentricity' dataKey='orbitalEccentricity' width={100} />\n          <Column label={this.columnHeader('Obliquity to Orbit')} dataKey='obliquityToOrbit' width={80} />\n          <Column label={this.columnHeader('Mean Temperature')} dataKey='meanTemperature' width={115} />\n          <Column label={this.columnHeader('Surface Pressure')} dataKey='surfacePressure' width={80} />\n        </Table>\n\n        <br />\n        <div>\n          {satellitesHeader}{showAllButton}\n        </div>\n\n        <Satellites planet={selectedPlanet} nOfSatellitesCallback={this.nOfSatellitesCallback} />\n\n      </div>\n    )\n  }\n\n  // TODO: Put the two columns below back to the table and fix their data.\n  //<Column label='Has Ring System' dataKey='hasRingSystem' width={80} className='text' />\n  //<Column label='Has Global Magnetic Field' dataKey='hasGlobalMagneticField' width={80} className='text' />\n\n  componentDidMount() {\n    dataLoader.loadAllPlanets((data: IPlanet[]) =>\n      this.setState({\n        planets: List(data),\n      })\n    );\n  }\n\n  private loadAllSatellites = () => {\n    this.setState({\n      selectedPlanet: null,\n    })\n  }\n\n  private sort = ({ sortBy, sortDirection }: { sortBy: string, sortDirection: SortDirectionType }) => {\n    const sortedPlanets = this.sortList(sortBy, sortDirection);\n    this.setState({ sortBy, sortDirection, planets: sortedPlanets });\n  }\n\n  private sortList = (sortBy: string, sortDirection: SortDirectionType): List<IPlanet> => {\n    const sortedPlanets = this.state.planets.sortBy(planet => planet === undefined ? '' : planet[sortBy]);\n    return List<IPlanet>(sortedPlanets).update(\n      sortedPlanets => (sortDirection === SortDirection.DESC ? List(sortedPlanets.reverse()) : sortedPlanets),\n    );\n  }\n\n}\n\nexport default Planets;\n","import React from 'react';\n\nexport default {\n  jpl: <a href='https://www.jpl.nasa.gov/'>NASA Jet Propulsion Laboratory</a>\n};\n\n","import React from 'react';\nimport { HashLink as Link } from 'react-router-hash-link';\nimport Links from './../links';\n\nconst github = 'https://github.com/mkrauskopf/devstronomy/blob/master/';\n\nconst gitHubLink = (relPath: string, fileName: string) =>\n  <a href={github + 'data/' + relPath + fileName}><code className='link'>{fileName}</code></a>;\n\n// Placeholders used in the HTML below.\nconst planetCsvLink = gitHubLink('csv/', 'planets.csv');\nconst planetJsonLink = gitHubLink('json/', 'planets.json');\nconst satellitesCsvLink = gitHubLink('csv/', 'satellites.csv');\nconst satellitesJsonLink = gitHubLink('json/', 'satellites.json');\nconst datasetsSql = gitHubLink('sql/', 'devstronomy.sql');\n\nconst Datasets = () => {\n\n  return(\n    <div>\n      <h1 className='content'>Datasets section</h1>\n      <p>\n        Devstronomy project aims to provide datasets related to astronomy in an accessible format (CSV, JSON, SQL).\n      <p>\n\n      </p>\n        Currently, there are datasets for:\n          <ul>\n            <li>planets of our Solar System (+ Pluto)</li>\n            <li>natural satellites(moons) of all planets</li>\n          </ul>\n      </p>\n\n\n      <hr id='tableofcontents'/>\n      <h2>Table of Contents</h2>\n      <ol>\n        <li><Link to='#downloads'>Quick Downloads</Link></li>\n        <li><Link to='#information'>Datasets information</Link></li>\n        <ol>\n          <li><Link to='#planets'>Planets</Link></li>\n          <li><Link to='#satellites'>Planetary Satellites</Link></li>\n        </ol>\n        <li><Link to='#csv'>CSV files</Link></li>\n        <li><Link to='#json'>JSON files</Link></li>\n        <li><Link to='#sql'>SQL Dataset</Link>\n          <ol>\n            <li><Link to='#sql-examples'>SQL usage examples</Link>\n              <ol>\n                <li><Link to='#ten-moons-saturn'>Ten largest moons of Saturn</Link></li>\n                <li><Link to='#planets-ecc'>Planets ordered by eccentricity</Link></li>\n                <li><Link to='#moons-inconsistency'>Inconsistency in the number of moons</Link></li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li><Link to='#implementation'>Implementation notes</Link></li>\n      </ol>\n\n\n      <hr id='downloads'/>\n      <h2>Quick Downloads</h2>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Dataset</th>\n            <th>CSV</th>\n            <th>JSON</th>\n            <th>SQL</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Planets</td>\n            <td>{planetCsvLink}</td>\n            <td>{planetJsonLink}</td>\n            <td>{datasetsSql}</td>\n          </tr>\n          <tr>\n            <td>Satellites</td>\n            <td>{satellitesCsvLink}</td>\n            <td>{satellitesJsonLink}</td>\n            <td>{datasetsSql}</td>\n          </tr>\n        </tbody>\n      </table>\n\n\n      <hr id='information'/>\n      <h2>Datasets information</h2>\n\n      <h3 id='planets'>Planets</h3>\n\n      <p>\n        The {planetCsvLink} file contains information about planets in our Solar System including dwarf planet Pluto.\n        The source of data is <a href='https://nssdc.gsfc.nasa.gov/planetary/factsheet/'>Planetary Fact Sheet</a> from {Links.jpl}.\n      </p>\n\n\n      <h4>Fields and units in the planetary dataset</h4>\n\n      <p>See also official <a href='https://nssdc.gsfc.nasa.gov/planetary/factsheet/planetfact_notes.html'>Planetary\n      Fact Sheet Notes</a> for more information about individual fields.</p>\n\n      <ul>\n        <li>Mass (10<sup>24</sup>kg)</li>\n        <li>Diameter (km)</li>\n        <li>Density (kg/m<sup>3</sup>)</li>\n        <li>Gravity (m/s<sup>2</sup>)</li>\n        <li>Escape Velocity (km/s)</li>\n        <li>Rotation Period (hours)</li>\n        <li>Length of Day (hours)</li>\n        <li>Distance from Sun (10<sup>6</sup> km)</li>\n        <li>Perihelion (10<sup>6</sup> km)</li>\n        <li>Aphelion (10<sup>6</sup> km)</li>\n        <li>Orbital Period (days)</li>\n        <li>Orbital Velocity (km/s)</li>\n        <li>Orbital Inclination (degrees)</li>\n        <li>Orbital Eccentricity</li>\n        <li>Obliquity to Orbit (degrees)</li>\n        <li>Mean Temperature (C)</li>\n        <li>Surface Pressure (bars)</li>\n        <li>Number of Moons (number)</li>\n        <li>Ring System? (Yes/No)</li>\n        <li>Global Magnetic Field? (Yes/No)</li>\n      </ul>\n\n\n      <h3 id='satellites'>Planetary satellites (moons)</h3>\n      <p>\n        The {satellitesCsvLink} file contains information about planetary satellites (moons) of planets in our Solar\n        System. Moons of dwarf planet Pluto are included as well.\n        The source of data is <a href='https://ssd.jpl.nasa.gov/?sat_phys_par'>Planetary Satellite Physical\n        Parameters</a> from {Links.jpl}.\n      </p>\n\n      <h4>Fields and units in the satellites dataset</h4>\n\n      <ul>\n        <li><em>planet</em>: owning planet of the satellite</li>\n        <li><em>name</em>: name of the satellite</li>\n        <li><em>gm</em>: GM (km<sup>3</sup>/sec<sup>2</sup>)</li>\n        <li><em>radius</em>: Mean radius (km)</li>\n        <li><em>density</em>: Mean density (g/cm<sup>3</sup>)</li>\n        <li><em>magnitude</em>: Magnitude V<sub>0</sub> or R</li>\n        <li><em>albedo</em>: Geometric Albedo</li>\n      </ul>\n\n\n      <hr id='csv'/>\n      <h2>CSV (comma-separated values) files</h2>\n      <ul>\n        <li>{planetCsvLink}</li>\n        <li>{satellitesCsvLink}</li>\n      </ul>\n\n\n      <hr id='json'/>\n      <h2>JSON</h2>\n      <ul>\n        <li>{planetJsonLink}</li>\n        <li>{satellitesJsonLink}</li>\n      </ul>\n\n\n      <hr id='sql'/>\n      <h2>SQL Dataset</h2>\n\n      <p>The {datasetsSql} creates tables for planets and their satellites and fill them with\n      data from the CSV files <Link to='#csv'>described above</Link>.</p>\n\n      <p>For example for MySQL database following commands will create the database:</p>\n\n      <pre>{\n`mysqladmin -u [uname] -p[pass] create devstronomy\nmysql -u [uname] -p[pass] devstronomy &lt; data/sql/devstronomy.sql`}</pre>\n\n      <h3 id='sql-examples'>SQL usage examples</h3>\n\n      <h4 id='ten-moons-saturn'>Information about ten largest moons of Saturn</h4>\n\n      <pre>{\n`SELECT s.name, s.radius, s.density, s.albedo FROM satellite AS s\n     LEFT JOIN planet as p ON p.id = s.planet_id\n     WHERE p.name = 'Saturn'\n     ORDER BY s.radius DESC\n     LIMIT 10`}</pre>\n\n      { /* Table of satellites. */ }\n      <table>\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>radius</th>\n            <th>density</th>\n            <th>albedo</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Titan</td>\n            <td align='right'>2574.730000</td>\n            <td align='right'>1.882000</td>\n            <td align='right'>0.200000</td>\n          </tr>\n          <tr>\n            <td>Rhea</td>\n            <td align='right'>764.300000</td>\n            <td align='right'>1.233000</td>\n            <td align='right'>0.949000</td>\n          </tr>\n          <tr>\n            <td>Iapetus</td>\n            <td align='right'>735.600000</td>\n            <td align='right'>1.083000</td>\n            <td align='right'>0.600000</td>\n          </tr>\n          <tr>\n            <td>Dione</td>\n            <td align='right'>561.700000</td>\n            <td align='right'>1.476000</td>\n            <td align='right'>0.998000</td>\n          </tr>\n          <tr>\n            <td>Tethys</td>\n            <td align='right'>533.000000</td>\n            <td align='right'>0.973000</td>\n            <td align='right'>1.229000</td>\n          </tr>\n          <tr>\n            <td>Enceladus</td>\n            <td align='right'>252.100000</td>\n            <td align='right'>1.608000</td>\n            <td align='right'>1.375000</td>\n          </tr>\n          <tr>\n            <td>Mimas</td>\n            <td align='right'>198.200000</td>\n            <td align='right'>1.150000</td>\n            <td align='right'>0.962000</td>\n          </tr>\n          <tr>\n            <td>Hyperion</td>\n            <td align='right'>135.000000</td>\n            <td align='right'>0.544000</td>\n            <td align='right'>0.300000</td>\n          </tr>\n          <tr>\n            <td>Phoebe</td>\n            <td align='right'>106.500000</td>\n            <td align='right'>1.638000</td>\n            <td align='right'>0.081000</td>\n          </tr>\n          <tr>\n            <td>Janus</td>\n            <td align='right'>89.500000</td>\n            <td align='right'>0.630000</td>\n            <td align='right'>0.710000</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <h4 id='planets-ecc'>Planets ordered by eccentricity</h4>\n\n      <pre>SELECT name, orbital_eccentricity FROM planet ORDER BY orbital_eccentricity;</pre>\n\n      { /* Result of select: table of planets. */ }\n      <table>\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>orbital_eccentricity</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Venus</td>\n            <td align='right'>0.007000</td>\n          </tr>\n          <tr>\n            <td>Neptune</td>\n            <td align='right'>0.011000</td>\n          </tr>\n          <tr>\n            <td>Earth</td>\n            <td align='right'>0.017000</td>\n          </tr>\n          <tr>\n            <td>Uranus</td>\n            <td align='right'>0.046000</td>\n          </tr>\n          <tr>\n            <td>Jupiter</td>\n            <td align='right'>0.049000</td>\n          </tr>\n          <tr>\n            <td>Saturn</td>\n            <td align='right'>0.057000</td>\n          </tr>\n          <tr>\n            <td>Mars</td>\n            <td align='right'>0.094000</td>\n          </tr>\n          <tr>\n            <td>Mercury</td>\n            <td align='right'>0.205000</td>\n          </tr>\n          <tr>\n            <td>Pluto</td>\n            <td align='right'>0.244000</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <h4 id='moons-inconsistency'>Inconsistency in the number of moons</h4>\n\n      <p>Note: the <code>planet.number_of_moons</code> does not reflect the number of records in the <code>satellite</code> table for Jupiter and\n      Saturn. See the SQL select below. (<em>TODO</em>: why)</p>\n\n      <pre>{\n`SELECT name, number_of_moons,\n    (SELECT COUNT(*) FROM satellite s WHERE p.id = s.planet_id) moons_in_table\n    FROM planet p;`}</pre>\n\n      <table>\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>number_of_moons</th>\n            <th>moons_in_table</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Mercury</td>\n            <td align='right'>0</td>\n            <td align='right'>0</td>\n          </tr>\n          <tr>\n            <td>Venus</td>\n            <td align='right'>0</td>\n            <td align='right'>0</td>\n          </tr>\n          <tr>\n            <td>Earth</td>\n            <td align='right'>1</td>\n            <td align='right'>1</td>\n          </tr>\n          <tr>\n            <td>Mars</td>\n            <td align='right'>2</td>\n            <td align='right'>2</td>\n          </tr>\n          <tr>\n            <td><strong>Jupiter</strong></td>\n            <td align='right'><strong>79</strong></td>\n            <td align='right'><strong>67</strong></td>\n          </tr>\n          <tr>\n            <td><strong>Saturn</strong></td>\n            <td align='right'><strong>62</strong></td>\n            <td align='right'><strong>61</strong></td>\n          </tr>\n          <tr>\n            <td>Uranus</td>\n            <td align='right'>27</td>\n            <td align='right'>27</td>\n          </tr>\n          <tr>\n            <td>Neptune</td>\n            <td align='right'>14</td>\n            <td align='right'>14</td>\n          </tr>\n          <tr>\n            <td>Pluto</td>\n            <td align='right'>5</td>\n            <td align='right'>5</td>\n          </tr>\n        </tbody>\n      </table>\n\n\n      <hr id='implementation'/>\n      <h2>Implementation notes</h2>\n\n      <h3>SQL notes</h3>\n\n      <p>The data are converted from CSV files to SQL schema with\n        the <a href='https://github.com/mkrauskopf/devstronomy/tree/master/jconverter'>JConverter tool</a>.\n        The final {datasetsSql} dump is then created via <code>mysqldump</code>:</p>\n\n      <pre>mysqldump -u [uname] -p[pass] devstronomy &gt; data/sql/devstronomy.sql</pre>\n\n      <h3>CSV notes</h3>\n\n      <h4>Transpose Python script</h4>\n\n      <pre>{\n`import pandas as pd\np = pd.read_csv('planets-nasa-export.csv', sep=';')\np.T.to_csv('planets.csv', header=False)`}</pre>\n\n    </div>\n  );\n};\n\nexport default Datasets;\n","import React from 'react';\nimport { HashRouter as Router, Link } from 'react-router-dom';\nimport { Route } from 'react-router-dom';\n\nimport { Planets } from './components/Planets';\nimport Datasets from './components/Datasets';\nimport Links from './links';\n\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport { MuiThemeProvider, createMuiTheme, withStyles } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\nimport amber from '@material-ui/core/colors/amber';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: { main: grey[900] },\n    secondary: { main: amber[500] },\n  }\n});\n\nconst styles = () => ({\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  launchIcon: {\n    width: 13,\n    height: 13,\n    color: '#66a',\n  },\n});\n\nconst PlanetsContent = () => {\n  return (\n    <div>\n      <div className='contentCenter'>\n        This is an interactive version of <a href='https://nssdc.gsfc.nasa.gov/planetary/factsheet/'>Planetary Fact\n        Sheet</a> and <a href='https://ssd.jpl.nasa.gov/?sat_phys_par'>Planetary Satellite Physical Parameters</a>\n        &nbsp;datasets from {Links.jpl}. See <Link to='/datasets'>datasets section</Link> for more details.\n        <p>\n          Tips: <span className='highlight'>Select the planet below</span> to see only its satellites\n          or <span className='highlight'>click on the column</span> to sort.\n        </p>\n      </div>\n\n      <hr/>\n      <div className='content'>\n        <span className='warning'>Note:</span> the following is not migrated from original satellite dataset yet:\n        <ul>\n          <li>For <em>Magnitude</em> column in satellites dataset V<sub>0</sub> or R are not distinguished.</li>\n          <li>\n            <em>Uncertainties</em> for some values. For example, for original value <code>13.70±0.04</code> in JPL\n            dataset we have just <code>13.70</code> without <code>0.04</code> uncertainty.\n          </li>\n        </ul>\n      </div>\n\n      <hr/>\n      <div className='planets'>\n        <Planets/>\n      </div>\n    </div>\n  );\n};\n\nconst DatasetsContent = () => {\n  return (\n    <div className='datasets'>\n      <Datasets/>\n    </div>\n  );\n};\n\nconst App = (props: { classes: any; }) => {\n\n  const { classes } = props;\n  const DatasetsLink = (props:any) => <Link {...props} to=\"/datasets\" />\n  const PlanetsLink = (props:any) => <Link {...props} to=\"/planets\" />\n  return (\n    <Router>\n      <MuiThemeProvider theme={theme}>\n        <div>\n\n          <div className={classes.root}>\n            <AppBar position='static'>\n              <Toolbar variant='dense'>\n\n                <Button variant='text' className={classes.button} component={PlanetsLink}>\n                  Planets &amp; Satellites\n                </Button>\n                <Button variant='text' className={classes.button} component={DatasetsLink}>\n                  Datasets\n                </Button>\n\n                <div className={classes.grow} />\n\n                <Button variant='text'\n                        className={classes.button}\n                        target='_blank'\n                        href='https://github.com/mkrauskopf/devstronomy/'>\n                  GitHub&nbsp;<LaunchIcon className={classes.launchIcon} />\n                </Button>\n\n              </Toolbar>\n            </AppBar>\n          </div>\n\n          <Route path='/' exact component={PlanetsContent} />\n          <Route path='/planets/' component={PlanetsContent} />\n          <Route path='/datasets/' component={DatasetsContent} />\n\n        </div>\n      </MuiThemeProvider>\n    </Router>\n  );\n\n};\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}