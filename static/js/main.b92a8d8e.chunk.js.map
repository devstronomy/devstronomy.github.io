{"version":3,"sources":["links.tsx","components/pages/HomeContent.tsx","components/data-loader-json.tsx","components/Satellites.tsx","components/Planets.tsx","components/pages/PlanetsContent.tsx","components/pages/DatasetsContent.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["links","jpl","react_default","a","createElement","href","HomeContent","className","Link","to","Links","callbacks","loadAllPlanets","callBack","planets","loadSatellites","planet","satellites","filter","s","planetId","id","loadAllSatellites","Satellites","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","units","GM","Mean Radius","Mean Density","Magnitude","rowClassName","_ref","index","columnHeader","column","dataLoader","setSatellites","setState","sortRawData","nOfSatellitesCallback","length","sort","_ref2","sortBy","sortDirection","sortedSatellites","sortList","state","sat","update","sats","SortDirection","DESC","reverse","List","prevProps","_this2","es","width","height","headerHeight","rowHeight","rowCount","size","rowGetter","_ref3","get","label","dataKey","React","Component","Planets","_React$Component","Mass","Diameter","Density","Gravity","Escape Velocity","Rotation Period","Length of Day","Distance from Sun","Perihelion","Aphelion","Orbital Period","Orbital Velocity","Orbital Inclination","Orbital Eccentricity","Obliquity to Orbit","Mean Temperature","Surface Pressure","Number of Moons","Ring System?","Global Magnetic Field?","selectPlanet","selectedPlanet","nOfSatellites","sortedPlanets","inherits","createClass","key","value","satellitesHeader","planetName","name","showAllButton","onClick","planetSpan","onRowClick","rowData","components_Satellites","_this3","data","PlanetsContent","Planets_Planets","gitHubLink","relPath","fileName","github","planetCsvLink","planetJsonLink","satellitesCsvLink","satellitesJsonLink","datasetsSql","DatasetsContent","lib","align","theme","createMuiTheme","palette","type","primary","main","grey","secondary","amber","RouteMenuButton","App_MenuButton","assign","component","linkProps","route","children","MenuButton","Button_default","style","color","variant","withStyles","root","flexGrow","grow","launchIcon","classes","routeMenuButton","title","App_RouteMenuButton","button","HashRouter","core_styles","AppBar_default","position","Toolbar_default","target","Launch_default","Route","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b92a8d8e.chunk.js","sourcesContent":["import React from 'react';\n\nexport default {\n  jpl: <a href='https://www.jpl.nasa.gov/'>NASA Jet Propulsion Laboratory</a>\n};\n\n","import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Links from '../../links';\n\n/**\n * Represents the home page of Devstronomy application.\n */\nconst HomeContent = () => {\n  return (\n    <div className='homepage flexCenter'>\n      <h1>Datasets</h1>\n      <p>\n        Devstronomy project provides <Link to='/datasets'>datasets</Link> related to astronomy in an accessible\n        format (CSV, JSON, SQL). Currently, datasets of planets of our solar system and their natural satellites\n        by {Links.jpl} are available.\n      </p>\n\n      <h1>Interactive Demo</h1>\n      <p>\n        Apart from the datasets themselves, there is an <Link to='/planets'>interactive demo</Link> of the data.\n      </p>\n    </div>\n  );\n};\n\nexport default HomeContent;\n","import planets from './../data/planets.json';\nimport satellites from './../data/satellites.json';\nimport ICallbacks from './data-loaders.jsx';\n\nconst callbacks: ICallbacks = {\n\n  // Loads all planets in the Solar System.\n  loadAllPlanets: callBack => {\n    callBack(planets);\n  },\n\n  // Loads satellites belonging to the given planet.\n  loadSatellites: (planet, callBack) => {\n    callBack(satellites.filter(s => s.planetId === planet.id));\n  },\n\n  // Loads satellites of all planets in the Solar System.\n  loadAllSatellites: callBack => {\n    callBack(satellites);\n  }\n\n};\n\nexport default callbacks;\n","import React from 'react';\nimport { Column, Table, Index, SortDirectionType, SortDirection } from 'react-virtualized';\nimport { IPlanet } from './Planets';\nimport { List } from 'immutable';\nimport dataLoader from './data-loader-json'\n\nexport interface ISatellite {\n  id: number;\n}\n\ninterface Props {\n  planet: IPlanet | null;\n  nOfSatellitesCallback(n: number): void;\n}\n\ninterface State {\n  sortBy?: string;\n  sortDirection?: SortDirectionType;\n  satellites: List<ISatellite>;\n}\n\nclass Satellites extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      satellites: List()\n    }\n  }\n\n  componentDidMount() {\n    this.loadAllSatellites();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.planet !== this.props.planet) {\n      this.loadSatellites(this.props.planet);\n    }\n  }\n\n  // Maps column name to its unit.\n  units: { [unitId: string]: JSX.Element } = {\n    'GM': <span>km<sup>3</sup>/sec<sup>2</sup></span>,\n    'Mean Radius': <span>km</span>,\n    'Mean Density': <span>g/cm<sup>3</sup></span>,\n    'Magnitude': <span>V<sub>0</sub> or R</span>,\n  };\n\n  private rowClassName = ({ index }: Index): string => {\n    return index % 2 === 0 ? 'oddRow' : '';\n  };\n\n  private columnHeader = (column: string): React.ReactNode => {\n    return <span>{column}<br /><span className='unit'>({this.units[column]})</span></span>;\n  };\n\n  render(): React.ReactNode {\n    const sortDirection = this.state.sortDirection;\n    const sortBy = this.state.sortBy;\n\n    return (\n      <Table width={575}\n        height={514}\n        headerHeight={90}\n        rowHeight={40}\n        rowCount={this.state.satellites.size}\n        rowGetter={({ index }: Index) => this.state.satellites.get(index)}\n        rowClassName={this.rowClassName}\n        sort={this.sort}\n        sortBy={sortBy}\n        sortDirection={sortDirection}\n      >\n        <Column label='Name' dataKey='name' width={105} className='main-column' />\n        <Column label={this.columnHeader('GM')} dataKey='gm' width={95} />\n        <Column label={this.columnHeader('Mean Radius')} dataKey='radius' width={75} />\n        <Column label={this.columnHeader('Mean Density')} dataKey='density' width={75} />\n        <Column label={this.columnHeader('Magnitude')} dataKey='magnitude' width={105} />\n        <Column label='Geometric Albedo' dataKey='albedo' width={100} />\n      </Table>\n    );\n  }\n\n  private loadAllSatellites = () => {\n    dataLoader.loadAllSatellites(this.setSatellites);\n  };\n\n  private loadSatellites = (planet: IPlanet | null): void => {\n    if (planet === null) {\n      this.loadAllSatellites();\n    } else {\n      dataLoader.loadSatellites(planet, this.setSatellites);\n    }\n  };\n\n  private setSatellites = (satellites: ISatellite[]): void => {\n    this.setState({\n      satellites: this.sortRawData(satellites)\n    });\n    this.props.nOfSatellitesCallback(satellites.length);\n  };\n\n  // TODO: get rid of duplicated code for sorting routines.\n  private sort = ({ sortBy, sortDirection }: { sortBy: string, sortDirection: SortDirectionType }) => {\n    const sortedSatellites = this.sortList(sortBy, sortDirection, this.state.satellites);\n    this.setState({ sortBy, sortDirection, satellites: sortedSatellites });\n  };\n\n  private sortList = (sortBy: string, sortDirection: SortDirectionType, satellites: List<ISatellite>): List<ISatellite> => {\n    return satellites\n      .sortBy(sat => sat[sortBy])\n      .update(sats => sortDirection === SortDirection.DESC ? sats.reverse() : sats);\n  };\n\n  private sortRawData = (satellites: ISatellite[]): List<ISatellite> => {\n    return this.state.sortBy && this.state.sortDirection\n      ? this.sortList(this.state.sortBy, this.state.sortDirection, List(satellites))\n      : List(satellites);\n  }\n\n};\n\nexport default Satellites;\n","import React from 'react';\nimport Satellites from './Satellites'\nimport { Column, Table, SortDirectionType, SortDirection, Index } from 'react-virtualized';\nimport dataLoader from './data-loader-json'\n\n// styles\nimport '../css-react-virtualized/styles.css'; // only needs to be imported once\nimport '../css/components/table.css';\nimport '../css/index.css';\nimport { List } from 'immutable';\n\nexport interface IPlanet {\n  id: number;\n  name: string;\n}\n\ninterface State {\n  planets: List<IPlanet>;\n  selectedPlanet: IPlanet | null;\n  nOfSatellites: number;\n  sortBy?: string;\n  sortDirection?: SortDirectionType;\n}\n\nexport class Planets extends React.Component<{}, State> {\n\n  // Maps column name to its unit.\n  units: { [unitId: string]: JSX.Element } = {\n    'Mass': <span>10<sup>24</sup>kg</span>,\n    'Diameter': <span>km</span>,\n    'Density': <span>kg/m<sup>3</sup></span>,\n    'Gravity': <span>m/s<sup>2</sup></span>,\n    'Escape Velocity': <span>km/s</span>,\n    'Rotation Period': <span>hours</span>,\n    'Length of Day': <span>hours</span>,\n    'Distance from Sun': <span>10<sup>6</sup> km</span>,\n    'Perihelion': <span>10<sup>6</sup> km</span>,\n    'Aphelion': <span>10<sup>6</sup> km</span>,\n    'Orbital Period': <span>days</span>,\n    'Orbital Velocity': <span>km/s</span>,\n    'Orbital Inclination': <span>degrees</span>,\n    'Orbital Eccentricity': <span></span>,\n    'Obliquity to Orbit': <span>degrees</span>,\n    'Mean Temperature': <span>C</span>,\n    'Surface Pressure': <span>bars</span>,\n    'Number of Moons': <span>number</span>,\n    'Ring System?': <span>Yes/No</span>,\n    'Global Magnetic Field?': <span>Yes/No</span>,\n  };\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      planets: List(),\n      selectedPlanet: null,\n      nOfSatellites: 0,\n    }\n  }\n\n  private selectPlanet = (planet: IPlanet): void => {\n    // If the same planet is selected again, deselect it.\n    this.setState({ selectedPlanet: planet === this.state.selectedPlanet ? null : planet })\n  };\n\n  private rowClassName = ({ index }: Index): string => {\n    if (index === -1) {\n      return '';\n    }\n    if (this.state.selectedPlanet === this.state.planets.get(index)) {\n      return 'selectedRow';\n    }\n    if (index % 2 === 0) {\n      return 'oddRow';\n    }\n    return '';\n  };\n\n  /**\n   * @param {string} column column ID. Must be key in the `units` dictionary.\n   * @returns generated node containing given text together with its unit.\n   */\n  private columnHeader = (column: string): React.ReactNode => {\n    return <span>{column}<br /><span className='unit'>({this.units[column]})</span></span>\n  };\n\n  private nOfSatellitesCallback = (nOfSatellites: number): void => {\n    this.setState({\n      nOfSatellites: nOfSatellites,\n    });\n  };\n\n  render(): React.ReactNode {\n    const selectedPlanet = this.state.selectedPlanet;\n    const nOfSatellites = this.state.nOfSatellites;\n    const planetName = selectedPlanet === null ? null : selectedPlanet.name;\n    const sortDirection = this.state.sortDirection;\n    const sortBy = this.state.sortBy;\n    const showAllButton = selectedPlanet\n      ? <span> (<button className='ahref' onClick={() => this.loadAllSatellites()}>show all satellites</button>)</span>\n      : ' (select a planet above to filter satellites)';\n\n    const planetSpan = <span className='header-highlight'>{planetName}</span>;\n    let satellitesHeader;\n    if (nOfSatellites === 0) {\n      satellitesHeader = <span>Planet {planetSpan} does not have any satellites</span>\n    } else { // render table with satellites\n      satellitesHeader = planetName === null\n        ? 'Satellites of all planets'\n        : <span>Satellites of planet {planetSpan}</span>\n    }\n    satellitesHeader = <span><span className='header'>{satellitesHeader}</span><span> ({nOfSatellites} shown)</span></span>;\n\n    return (\n      <div>\n\n        <span className='header'>Planets of our Solar System</span>\n\n        <Table width={1950}\n          height={450}\n          headerHeight={90}\n          rowHeight={40}\n          rowCount={this.state.planets.size}\n          rowGetter={({ index }: Index) => this.state.planets.get(index)}\n          rowClassName={this.rowClassName}\n          onRowClick={(props: any) => this.selectPlanet(props.rowData)}\n          sort={this.sort}\n          sortBy={sortBy}\n          sortDirection={sortDirection}\n        >\n          <Column label='Name' dataKey='name' width={70} className='main-column' />\n          <Column label={this.columnHeader('Distance from Sun')} dataKey='distanceFromSun' width={80} />\n          <Column label='Moons' dataKey='numberOfMoons' width={70} />\n          <Column label={this.columnHeader('Mass')} dataKey='mass' width={70} />\n          <Column label={this.columnHeader('Diameter')} dataKey='diameter' width={90} />\n          <Column label={this.columnHeader('Density')} dataKey='density' width={70} />\n          <Column label={this.columnHeader('Gravity')} dataKey='gravity' width={70} />\n          <Column label={this.columnHeader('Escape Velocity')} dataKey='escapeVelocity' width={80} />\n          <Column label={this.columnHeader('Rotation Period')} dataKey='rotationPeriod' width={80} />\n          <Column label={this.columnHeader('Length of Day')} dataKey='lengthOfDay' width={80} />\n          <Column label={this.columnHeader('Perihelion')} dataKey='perihelion' width={100} />\n          <Column label={this.columnHeader('Aphelion')} dataKey='aphelion' width={90} />\n          <Column label={this.columnHeader('Orbital Period')} dataKey='orbitalPeriod' width={70} />\n          <Column label={this.columnHeader('Orbital Velocity')} dataKey='orbitalVelocity' width={80} />\n          <Column label={this.columnHeader('Orbital Inclination')} dataKey='orbitalInclination' width={100} />\n          <Column label='Orbital Eccentricity' dataKey='orbitalEccentricity' width={100} />\n          <Column label={this.columnHeader('Obliquity to Orbit')} dataKey='obliquityToOrbit' width={80} />\n          <Column label={this.columnHeader('Mean Temperature')} dataKey='meanTemperature' width={115} />\n          <Column label={this.columnHeader('Surface Pressure')} dataKey='surfacePressure' width={80} />\n        </Table>\n\n        <br />\n        <div>\n          {satellitesHeader}{showAllButton}\n        </div>\n\n        <Satellites planet={selectedPlanet} nOfSatellitesCallback={this.nOfSatellitesCallback} />\n\n      </div>\n    )\n  }\n\n  // TODO: Put the two columns below back to the table and fix their data.\n  //<Column label='Has Ring System' dataKey='hasRingSystem' width={80} className='text' />\n  //<Column label='Has Global Magnetic Field' dataKey='hasGlobalMagneticField' width={80} className='text' />\n\n  componentDidMount() {\n    dataLoader.loadAllPlanets((data: IPlanet[]) =>\n      this.setState({\n        planets: List(data),\n      })\n    );\n  }\n\n  private loadAllSatellites = () => {\n    this.setState({\n      selectedPlanet: null,\n    })\n  };\n\n  private sort = ({ sortBy, sortDirection }: { sortBy: string, sortDirection: SortDirectionType }) => {\n    const sortedPlanets = this.sortList(sortBy, sortDirection);\n    this.setState({ sortBy, sortDirection, planets: sortedPlanets });\n  };\n\n  private sortList = (sortBy: string, sortDirection: SortDirectionType): List<IPlanet> => {\n    return this.state.planets\n      .sortBy(planet => planet[sortBy])\n      .update(planets => (sortDirection === SortDirection.DESC ? List(planets.reverse()) : planets));\n  }\n\n}\n\nexport default Planets;\n","import React from \"react\";\n\nimport {Planets} from '../Planets';\nimport Links from '../../links';\n\n/**\n * Represents content with an interactive demo of planetary and satellites datasets.\n */\nconst PlanetsContent = () => {\n  return (\n    <div>\n\n      <div className='contentCenter'>\n        This is an interactive version of <a href='https://nssdc.gsfc.nasa.gov/planetary/factsheet/'>Planetary Fact\n        Sheet</a> and <a href='https://ssd.jpl.nasa.gov/?sat_phys_par'>Planetary Satellite Physical Parameters</a>\n        &nbsp;datasets from {Links.jpl}.\n        <p>\n          Tips: <span className='highlight'>Select the planet below</span> to see only its satellites\n          or <span className='highlight'>click on the column</span> to sort.\n        </p>\n      </div>\n\n      <hr/>\n\n      <div className='planets'>\n        <Planets/>\n      </div>\n\n    </div>\n  );\n};\n\n\nexport default PlanetsContent;\n","import React from 'react';\nimport {HashLink as Link} from 'react-router-hash-link';\nimport Links from '../../links';\n\nconst github = 'https://github.com/devstronomy/nasa-data-scraper/blob/master/';\n\nconst gitHubLink = (relPath: string, fileName: string) =>\n  <a href={github + 'data/' + relPath + fileName}><code className='link'>{fileName}</code></a>;\n\n// Placeholders used in the HTML below.\nconst planetCsvLink = gitHubLink('csv/', 'planets.csv');\nconst planetJsonLink = gitHubLink('json/', 'planets.json');\nconst satellitesCsvLink = gitHubLink('csv/', 'satellites.csv');\nconst satellitesJsonLink = gitHubLink('json/', 'satellites.json');\nconst datasetsSql = gitHubLink('sql/', 'devstronomy.sql');\n\n/**\n * Represents 'Datasets' page of Devstronomy application. Provides information about available datasets, the download\n * links and their sample usage (e.g., SQL selects).\n */\nconst DatasetsContent = () => (\n  <div className='flexCenter'>\n    <h1 className='content'>Datasets section</h1>\n    <p>\n      Devstronomy project aims to provide datasets related to astronomy in an accessible format (CSV, JSON, SQL).\n    </p>\n    <p>\n      Currently, there are datasets for:\n    </p>\n    <div>\n      <ul>\n        <li>planets of our Solar System (+ Pluto)</li>\n        <li>natural satellites(moons) of all planets</li>\n      </ul>\n    </div>\n\n    <hr/>\n    <p>\n      <span className='warning'>Note:</span> the following is not migrated from original satellite dataset yet:\n    </p>\n    <div>\n      <ul>\n        <li>For <em>Magnitude</em> column in satellites dataset V<sub>0</sub> or R are not distinguished.</li>\n        <li>\n          <em>Uncertainties</em> for some values. For example, for original value <code>13.70±0.04</code> in JPL\n          dataset we have just <code>13.70</code> without <code>0.04</code> uncertainty.\n        </li>\n      </ul>\n    </div>\n\n    <hr id='tableofcontents'/>\n    <h2>Table of Contents</h2>\n    <div>\n      <ol>\n        <li><Link to='#downloads'>Quick Downloads</Link></li>\n        <li><Link to='#information'>Datasets information</Link></li>\n        <ol>\n          <li><Link to='#planets'>Planets</Link></li>\n          <li><Link to='#satellites'>Planetary Satellites</Link></li>\n        </ol>\n        <li><Link to='#csv'>CSV files</Link></li>\n        <li><Link to='#json'>JSON files</Link></li>\n        <li><Link to='#sql'>SQL Dataset</Link>\n          <ol>\n            <li><Link to='#sql-examples'>SQL usage examples</Link>\n              <ol>\n                <li><Link to='#ten-moons-saturn'>Ten largest moons of Saturn</Link></li>\n                <li><Link to='#planets-ecc'>Planets ordered by eccentricity</Link></li>\n                <li><Link to='#moons-inconsistency'>Inconsistency in the number of moons</Link></li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li><Link to='#implementation'>Implementation notes</Link></li>\n      </ol>\n    </div>\n\n\n    <hr id='downloads'/>\n    <h2>Quick Downloads</h2>\n\n    <table>\n      <thead>\n        <tr>\n          <th>Dataset</th>\n          <th>CSV</th>\n          <th>JSON</th>\n          <th>SQL</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Planets</td>\n          <td>{planetCsvLink}</td>\n          <td>{planetJsonLink}</td>\n          <td>{datasetsSql}</td>\n        </tr>\n        <tr>\n          <td>Satellites</td>\n          <td>{satellitesCsvLink}</td>\n          <td>{satellitesJsonLink}</td>\n          <td>{datasetsSql}</td>\n        </tr>\n      </tbody>\n    </table>\n\n\n    <hr id='information'/>\n    <h2>Datasets information</h2>\n\n    <h3 id='planets'>Planets</h3>\n\n    <p>\n      The {planetCsvLink} file contains information about planets in our Solar System including dwarf planet Pluto.\n      The source of data is <a href='https://nssdc.gsfc.nasa.gov/planetary/factsheet/'>Planetary Fact\n      Sheet</a> from {Links.jpl}.\n    </p>\n\n\n    <h4>Fields and units in the planetary dataset</h4>\n\n    <p>\n      See also official <a href='https://nssdc.gsfc.nasa.gov/planetary/factsheet/planetfact_notes.html'>Planetary Fact\n      Sheet Notes</a> for more information about individual fields.\n    </p>\n\n    <div>\n      <ul>\n        <li>Mass (10<sup>24</sup>kg)</li>\n        <li>Diameter (km)</li>\n        <li>Density (kg/m<sup>3</sup>)</li>\n        <li>Gravity (m/s<sup>2</sup>)</li>\n        <li>Escape Velocity (km/s)</li>\n        <li>Rotation Period (hours)</li>\n        <li>Length of Day (hours)</li>\n        <li>Distance from Sun (10<sup>6</sup> km)</li>\n        <li>Perihelion (10<sup>6</sup> km)</li>\n        <li>Aphelion (10<sup>6</sup> km)</li>\n        <li>Orbital Period (days)</li>\n        <li>Orbital Velocity (km/s)</li>\n        <li>Orbital Inclination (degrees)</li>\n        <li>Orbital Eccentricity</li>\n        <li>Obliquity to Orbit (degrees)</li>\n        <li>Mean Temperature (C)</li>\n        <li>Surface Pressure (bars)</li>\n        <li>Number of Moons (number)</li>\n        <li>Ring System? (Yes/No)</li>\n        <li>Global Magnetic Field? (Yes/No)</li>\n      </ul>\n    </div>\n\n\n    <h3 id='satellites'>Planetary satellites (moons)</h3>\n    <p>\n      The {satellitesCsvLink} file contains information about planetary satellites (moons) of planets in our Solar\n      System. Moons of dwarf planet Pluto are included as well.\n      The source of data is <a href='https://ssd.jpl.nasa.gov/?sat_phys_par'>Planetary Satellite Physical\n      Parameters</a> from {Links.jpl}.\n    </p>\n\n    <h4>Fields and units in the satellites dataset</h4>\n\n    <div>\n      <ul>\n        <li><em>planet</em>: owning planet of the satellite</li>\n        <li><em>name</em>: name of the satellite</li>\n        <li><em>gm</em>: GM (km<sup>3</sup>/sec<sup>2</sup>)</li>\n        <li><em>radius</em>: Mean radius (km)</li>\n        <li><em>density</em>: Mean density (g/cm<sup>3</sup>)</li>\n        <li><em>magnitude</em>: Magnitude V<sub>0</sub> or R</li>\n        <li><em>albedo</em>: Geometric Albedo</li>\n      </ul>\n    </div>\n\n\n    <hr id='csv'/>\n    <h2>CSV (comma-separated values) files</h2>\n    <div>\n      <ul>\n        <li>{planetCsvLink}</li>\n        <li>{satellitesCsvLink}</li>\n      </ul>\n    </div>\n\n\n    <hr id='json'/>\n    <h2>JSON</h2>\n    <div>\n      <ul>\n        <li>{planetJsonLink}</li>\n        <li>{satellitesJsonLink}</li>\n      </ul>\n    </div>\n\n\n    <hr id='sql'/>\n    <h2>SQL Dataset</h2>\n\n    <p>\n      The {datasetsSql} creates tables for planets and their satellites and fill them with data from the CSV\n      files <Link to='#csv'>described above</Link>.\n    </p>\n\n    <p>For example for MySQL database following commands will create the database:</p>\n\n    <pre>{\n      `mysqladmin -u [uname] -p[pass] create devstronomy\nmysql -u [uname] -p[pass] devstronomy &lt; data/sql/devstronomy.sql`}</pre>\n\n    <h3 id='sql-examples'>SQL usage examples</h3>\n\n    <h4 id='ten-moons-saturn'>Information about ten largest moons of Saturn</h4>\n\n    <pre>{\n        `SELECT s.name, s.radius, s.density, s.albedo FROM satellite AS s\n   LEFT JOIN planet as p ON p.id = s.planet_id\n   WHERE p.name = 'Saturn'\n   ORDER BY s.radius DESC\n   LIMIT 10`}</pre>\n\n    { /* Table of satellites. */}\n    <table>\n      <thead>\n        <tr>\n          <th>name</th>\n          <th>radius</th>\n          <th>density</th>\n          <th>albedo</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Titan</td>\n          <td align='right'>2574.730000</td>\n          <td align='right'>1.882000</td>\n          <td align='right'>0.200000</td>\n        </tr>\n        <tr>\n          <td>Rhea</td>\n          <td align='right'>764.300000</td>\n          <td align='right'>1.233000</td>\n          <td align='right'>0.949000</td>\n        </tr>\n        <tr>\n          <td>Iapetus</td>\n          <td align='right'>735.600000</td>\n          <td align='right'>1.083000</td>\n          <td align='right'>0.600000</td>\n        </tr>\n        <tr>\n          <td>Dione</td>\n          <td align='right'>561.700000</td>\n          <td align='right'>1.476000</td>\n          <td align='right'>0.998000</td>\n        </tr>\n        <tr>\n          <td>Tethys</td>\n          <td align='right'>533.000000</td>\n          <td align='right'>0.973000</td>\n          <td align='right'>1.229000</td>\n        </tr>\n        <tr>\n          <td>Enceladus</td>\n          <td align='right'>252.100000</td>\n          <td align='right'>1.608000</td>\n          <td align='right'>1.375000</td>\n        </tr>\n        <tr>\n          <td>Mimas</td>\n          <td align='right'>198.200000</td>\n          <td align='right'>1.150000</td>\n          <td align='right'>0.962000</td>\n        </tr>\n        <tr>\n          <td>Hyperion</td>\n          <td align='right'>135.000000</td>\n          <td align='right'>0.544000</td>\n          <td align='right'>0.300000</td>\n        </tr>\n        <tr>\n          <td>Phoebe</td>\n          <td align='right'>106.500000</td>\n          <td align='right'>1.638000</td>\n          <td align='right'>0.081000</td>\n        </tr>\n        <tr>\n          <td>Janus</td>\n          <td align='right'>89.500000</td>\n          <td align='right'>0.630000</td>\n          <td align='right'>0.710000</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <h4 id='planets-ecc'>Planets ordered by eccentricity</h4>\n\n    <pre>SELECT name, orbital_eccentricity FROM planet ORDER BY orbital_eccentricity;</pre>\n\n    { /* Result of select: table of planets. */}\n    <table>\n      <thead>\n        <tr>\n          <th>name</th>\n          <th>orbital_eccentricity</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Venus</td>\n          <td align='right'>0.007000</td>\n        </tr>\n        <tr>\n          <td>Neptune</td>\n          <td align='right'>0.011000</td>\n        </tr>\n        <tr>\n          <td>Earth</td>\n          <td align='right'>0.017000</td>\n        </tr>\n        <tr>\n          <td>Uranus</td>\n          <td align='right'>0.046000</td>\n        </tr>\n        <tr>\n          <td>Jupiter</td>\n          <td align='right'>0.049000</td>\n        </tr>\n        <tr>\n          <td>Saturn</td>\n          <td align='right'>0.057000</td>\n        </tr>\n        <tr>\n          <td>Mars</td>\n          <td align='right'>0.094000</td>\n        </tr>\n        <tr>\n          <td>Mercury</td>\n          <td align='right'>0.205000</td>\n        </tr>\n        <tr>\n          <td>Pluto</td>\n          <td align='right'>0.244000</td>\n        </tr>\n      </tbody>\n    </table>\n\n    <h4 id='moons-inconsistency'>Inconsistency in the number of moons</h4>\n\n    <p>\n      Note: the <code>planet.number_of_moons</code> does not reflect the number of records in\n      the <code>satellite</code> table for Jupiter and Saturn. See the SQL select below. (<em>TODO</em>: explain why)\n    </p>\n\n    <pre>{\n        `SELECT name, number_of_moons,\n  (SELECT COUNT(*) FROM satellite s WHERE p.id = s.planet_id) moons_in_table\n  FROM planet p;`}</pre>\n\n    <table>\n      <thead>\n        <tr>\n          <th>name</th>\n          <th>number_of_moons</th>\n          <th>moons_in_table</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>Mercury</td>\n          <td align='right'>0</td>\n          <td align='right'>0</td>\n        </tr>\n        <tr>\n          <td>Venus</td>\n          <td align='right'>0</td>\n          <td align='right'>0</td>\n        </tr>\n        <tr>\n          <td>Earth</td>\n          <td align='right'>1</td>\n          <td align='right'>1</td>\n        </tr>\n        <tr>\n          <td>Mars</td>\n          <td align='right'>2</td>\n          <td align='right'>2</td>\n        </tr>\n        <tr>\n          <td><strong>Jupiter</strong></td>\n          <td align='right'><strong>79</strong></td>\n          <td align='right'><strong>67</strong></td>\n        </tr>\n        <tr>\n          <td><strong>Saturn</strong></td>\n          <td align='right'><strong>62</strong></td>\n          <td align='right'><strong>61</strong></td>\n        </tr>\n        <tr>\n          <td>Uranus</td>\n          <td align='right'>27</td>\n          <td align='right'>27</td>\n        </tr>\n        <tr>\n          <td>Neptune</td>\n          <td align='right'>14</td>\n          <td align='right'>14</td>\n        </tr>\n        <tr>\n          <td>Pluto</td>\n          <td align='right'>5</td>\n          <td align='right'>5</td>\n        </tr>\n      </tbody>\n    </table>\n\n\n    <hr id='implementation'/>\n    <h2>Implementation notes</h2>\n\n    <h3>SQL notes</h3>\n\n    <p>The data are converted from CSV files to SQL schema with\n      the <a href='https://github.com/mkrauskopf/devstronomy/tree/master/jconverter'>JConverter tool</a>.\n      The final {datasetsSql} dump is then created via <code>mysqldump</code>:</p>\n\n    <pre>mysqldump -u [uname] -p[pass] devstronomy &gt; data/sql/devstronomy.sql</pre>\n\n    <h3>CSV notes</h3>\n\n    <h4>Transpose Python script</h4>\n\n    <pre>{\n      `import pandas as pd\np = pd.read_csv('planets-nasa-export.csv', sep=';')\np.T.to_csv('planets.csv', header=False)`}</pre>\n\n  </div>\n);\n\nexport default DatasetsContent;\n","import React from 'react';\nimport {HashRouter as Router, Link, LinkProps, Route} from 'react-router-dom';\n\nimport HomeContent from \"./components/pages/HomeContent\";\nimport PlanetsContent from \"./components/pages/PlanetsContent\";\nimport DatasetsContent from './components/pages/DatasetsContent';\n\nimport PropTypes from 'prop-types';\nimport Button, {ButtonProps} from '@material-ui/core/Button';\nimport {createMuiTheme, MuiThemeProvider, withStyles} from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\nimport amber from '@material-ui/core/colors/amber';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport {LocationDescriptor} from \"history\";\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: { main: grey[900] },\n    secondary: { main: amber[500] },\n  }\n});\n\nconst styles = () => ({\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  launchIcon: {\n    width: 13,\n    height: 13,\n    color: 'white',\n  },\n});\n\n// TODO: I did not come up with a solution using `FunctionComponent`.\n/** `MenuButton` button with React Router link. */\nclass RouteMenuButton<ButtonProps extends { route: LocationDescriptor }>\n  extends React.Component<ButtonProps> {\n\n  render() {\n    return (\n      // see https://github.com/mui-org/material-ui/issues/850#issuecomment-334118855 for 'Link' explanation.\n      <MenuButton component={(linkProps: LinkProps) => <Link {...linkProps} to={this.props.route} />}\n                  {...this.props}>\n        {this.props.children}\n      </MenuButton>)\n  }\n\n}\n\n/** Menu button customised for Devstronomy. */\nconst MenuButton: React.FunctionComponent<ButtonProps> = (props) => {\n  return <Button style={{color: 'white'}} variant='text' {...props}>{props.children}</Button>\n};\n\nconst App = (props: { classes: any; }) => {\n\n  const {classes} = props;\n\n  const routeMenuButton = (route: LocationDescriptor, title: React.ReactNode) =>\n    <RouteMenuButton className={classes.button} route={route}>{title}</RouteMenuButton>;\n\n  return (\n    <Router>\n      <MuiThemeProvider theme={theme}>\n        <div>\n          <div className={classes.root}>\n            <AppBar position='static'>\n              <Toolbar variant='dense'>\n\n                {routeMenuButton('/', 'Home')}\n                {routeMenuButton('/planets', 'Planets & Satellites')}\n                {routeMenuButton('/datasets', 'Datasets')}\n\n                <div className={classes.grow} />\n\n                <MenuButton className={classes.button}\n                            target='_blank'\n                            href='https://github.com/devstronomy/'>\n                  GitHub&nbsp;<LaunchIcon className={classes.launchIcon} />\n                </MenuButton>\n\n              </Toolbar>\n            </AppBar>\n          </div>\n\n          <Route path='/' exact component={HomeContent} />\n          <Route path='/planets/' component={PlanetsContent} />\n          <Route path='/datasets/' component={DatasetsContent} />\n\n        </div>\n      </MuiThemeProvider>\n    </Router>\n  );\n\n};\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}