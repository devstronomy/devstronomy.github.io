{"version":3,"sources":["components/Satellites.js","components/data-loader-json.js","components/Planets.js","links.js","components/Datasets.js","App.js","serviceWorker.js","index.js"],"names":["Satellites","props","units","GM","react_default","a","createElement","Mean Radius","Mean Density","Magnitude","columnHeader","column","className","es","width","height","headerHeight","rowHeight","rowCount","satellites","length","rowGetter","_ref2","index","rowClassName","_ref","label","dataKey","data_loader_json","loadAllPlanets","callBack","planets","loadSatellites","planet","filter","s","planetId","id","loadAllSatellites","Planets","Mass","Diameter","Density","Gravity","Escape Velocity","Rotation Period","Length of Day","Distance from Sun","Perihelion","Aphelion","Orbital Period","Orbital Velocity","Orbital Inclination","Orbital Eccentricity","Obliquity to Orbit","Mean Temperature","Surface Pressure","Number of Moons","Ring System?","Global Magnetic Field?","state","selectedPlanet","showMoons","_this","dataLoader","data","setState","_rowClassName","satellitesHeader","_this2","this","planetName","name","showAllButton","onClick","planetSpan","onRowClick","rowData","components_Satellites","_this3","_this4","Component","links","jpl","href","gitHubLink","relPath","fileName","github","planetCsvLink","planetJsonLink","satellitesCsvLink","satellitesJsonLink","datasetsSql","Datasets","Links","align","theme","createMuiTheme","palette","type","primary","main","grey","secondary","amber","PlanetsContent","Link","to","components_Planets","DatasetsContent","components_Datasets","withStyles","root","flexGrow","grow","launchIcon","color","classes","BrowserRouter","core_styles","AppBar_default","position","Toolbar_default","variant","Button_default","button","component","target","Launch_default","Route_default","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e24d012f.chunk.js","sourcesContent":["import React from 'react';\nimport { Column, Table } from 'react-virtualized';\n\nconst Satellites = (props) => {\n\n  // Maps column name to its unit.\n  const units = {\n    'GM': <span>km<sup>3</sup>/sec<sup>2</sup></span>,\n    'Mean Radius': 'km',\n    'Mean Density': <span>g/cm<sup>3</sup></span>,\n    'Magnitude': <span>V<sub>0</sub> or R</span>,\n  };\n\n  const _rowClassName = ({index}) => {\n    if (index % 2 === 0) {\n      return 'oddRow';\n    }\n  };\n\n  const columnHeader = column => {\n    return <span>{column}<br/><span className='unit'>({units[column]})</span></span>;\n  };\n\n  return(\n    <Table width={575}\n           height={514}\n           headerHeight={90}\n           rowHeight={40}\n           rowCount={props.satellites.length}\n           rowGetter={({ index }) => props.satellites[index]}\n           rowClassName={_rowClassName}\n    >\n      <Column label='Name' dataKey='name' width={105} className='main-column' />\n      <Column label={columnHeader('GM')} dataKey='gm' width={95} />\n      <Column label={columnHeader('Mean Radius')} dataKey='radius' width={75} />\n      <Column label={columnHeader('Mean Density')} dataKey='density' width={75} />\n      <Column label={columnHeader('Magnitude')} dataKey='magnitude' width={105} />\n      <Column label='Geometric Albedo' dataKey='albedo' width={100} />\n    </Table>\n  );\n\n};\n\nexport default Satellites;\n\n","import planets from './../data/planets.json';\nimport satellites from './../data/satellites.json';\n\nexport default {\n\n  // Loads all planets in the Solar System.\n  loadAllPlanets: callBack => {\n    callBack(planets);\n  },\n\n  // Loads satellites belonging to the given planet.\n  loadSatellites: (planet, callBack) => {\n    callBack(satellites.filter(s => s.planetId === planet.id));\n  },\n\n  // Loads satellites of all planets in the Solar System.\n  loadAllSatellites: callBack => {\n    callBack(satellites);\n  }\n\n};\n\n","import React, { Component } from 'react';\nimport Satellites from './Satellites'\nimport { Column, Table } from 'react-virtualized';\nimport dataLoader from './data-loader-json.js'\n\n// styles\nimport '../css-react-virtualized/styles.css'; // only needs to be imported once\nimport '../css/components/table.css';\nimport '../css/components/components.css';\n\nclass Planets extends Component {\n\n  // Maps column name to its unit.\n  units = {\n    'Mass': <span>10<sup>24</sup>kg</span>,\n    'Diameter': 'km',\n    'Density': <span>kg/m<sup>3</sup></span>,\n    'Gravity': <span>m/s<sup>2</sup></span>,\n    'Escape Velocity': 'km/s',\n    'Rotation Period': 'hours',\n    'Length of Day': 'hours',\n    'Distance from Sun': <span>10<sup>6</sup> km</span>,\n    'Perihelion': <span>10<sup>6</sup> km</span>,\n    'Aphelion': <span>10<sup>6</sup> km</span>,\n    'Orbital Period': 'days',\n    'Orbital Velocity': 'km/s',\n    'Orbital Inclination': 'degrees',\n    'Orbital Eccentricity': '',\n    'Obliquity to Orbit': 'degrees',\n    'Mean Temperature': 'C',\n    'Surface Pressure': 'bars',\n    'Number of Moons': 'number',\n    'Ring System?': 'Yes/No',\n    'Global Magnetic Field?': 'Yes/No',\n  }\n\n  state = {\n    planets: [],\n    selectedPlanet: null,\n    satellites: []\n  }\n\n  showMoons = (planet) => {\n    if (planet === this.state.selectedPlanet) {\n      this.loadAllSatellites();\n    } else {\n      dataLoader.loadSatellites(planet, data =>\n        this.setState({\n          satellites: data,\n          selectedPlanet: planet\n        })\n      );\n    }\n  }\n\n  _rowClassName = ({index}) => {\n    if (this.state.selectedPlanet === this.state.planets[index]) {\n      return 'selectedRow';\n    }\n    if (index % 2 === 0) {\n      return 'oddRow';\n    }\n  }\n  \n  columnHeader = column => {\n    return <span>{column}<br/><span className='unit'>({this.units[column]})</span></span>\n  }\n\n  render() {\n    const selectedPlanet = this.state.selectedPlanet;\n    const satellites = this.state.satellites;\n    const planetName = selectedPlanet === null ? null : selectedPlanet.name;\n\n    const showAllButton = selectedPlanet\n      ? <span> (<button className='ahref' onClick={() => this.loadAllSatellites()}>show all satellites</button>)</span>\n      : ' (select a planet above to filter satellites)';\n\n    const planetSpan = <span className='highlight'>{planetName}</span>\n    let satellitesHeader;\n    if (satellites.length === 0) {\n      satellitesHeader = <span>Planet {planetSpan} does not have any satellites</span>\n    } else { // render table with satellites\n      satellitesHeader = planetName === null\n        ? 'Satellites of all planets'\n        : <span>Satellites of planet {planetSpan}</span>\n    }\n    satellitesHeader = <span><span className='header'>{satellitesHeader}</span><span> ({satellites.length} shown)</span></span>\n\n    return (\n      <div>\n\n        <span className='header'>Planets of our Solar System</span>\n\n        <Table width={1950}\n               height={450}\n               headerHeight={90}\n               rowHeight={40}\n               rowCount={this.state.planets.length}\n               rowGetter={({ index }) => this.state.planets[index]}\n               rowClassName={this._rowClassName}\n               onRowClick={(props) => this.showMoons(props.rowData)}\n               >\n          <Column label='Name' dataKey='name' width={70} className='main-column' />\n          <Column label='Moons' dataKey='numberOfMoons' width={70} />\n          <Column label={this.columnHeader('Mass')} dataKey='mass' width={70} />\n          <Column label={this.columnHeader('Diameter')} dataKey='diameter' width={90} />\n          <Column label={this.columnHeader('Density')} dataKey='density' width={70} />\n          <Column label={this.columnHeader('Gravity')} dataKey='gravity' width={70} />\n          <Column label={this.columnHeader('Escape Velocity')} dataKey='escapeVelocity' width={80} />\n          <Column label={this.columnHeader('Rotation Period')} dataKey='rotationPeriod' width={80} />\n          <Column label={this.columnHeader('Length of Day')} dataKey='lengthOfDay' width={80} />\n          <Column label={this.columnHeader('Distance from Sun')} dataKey='distanceFromSun' width={80} />\n          <Column label={this.columnHeader('Perihelion')} dataKey='perihelion' width={100} />\n          <Column label={this.columnHeader('Aphelion')} dataKey='aphelion' width={90} />\n          <Column label={this.columnHeader('Orbital Period')} dataKey='orbitalPeriod' width={70} />\n          <Column label={this.columnHeader('Orbital Velocity')} dataKey='orbitalVelocity' width={80} />\n          <Column label={this.columnHeader('Orbital Inclination')} dataKey='orbitalInclination' width={100} />\n          <Column label='Orbital Eccentricity' dataKey='orbitalEccentricity' width={100} />\n          <Column label={this.columnHeader('Obliquity to Orbit')} dataKey='obliquityToOrbit' width={80} />\n          <Column label={this.columnHeader('Mean Temperature')} dataKey='meanTemperature' width={115} />\n          <Column label={this.columnHeader('Surface Pressure')} dataKey='surfacePressure' width={80} />\n        </Table>\n\n        <br/>\n        <div>\n          {satellitesHeader}{showAllButton}\n        </div>\n\n        <Satellites planet={this.state.selectedPlanet} satellites={this.state.satellites} />\n\n      </div>\n    )\n  }\n\n  // TODO: Put the two columns below back to the table and fix their data.\n  //<Column label='Has Ring System' dataKey='hasRingSystem' width={80} className='text' />\n  //<Column label='Has Global Magnetic Field' dataKey='hasGlobalMagneticField' width={80} className='text' />\n\n  componentDidMount() {\n    dataLoader.loadAllPlanets(data =>\n      this.setState({\n        planets: data\n      })\n    );\n\n    this.loadAllSatellites();\n  }\n\n  loadAllSatellites() {\n    dataLoader.loadAllSatellites(data =>\n      this.setState({\n        satellites: data,\n        selectedPlanet: null\n      })\n    );\n  }\n\n}\n\nexport default Planets;\n\n","import React from 'react';\n\nexport default {\n  jpl: <a href='https://www.jpl.nasa.gov/'>NASA Jet Propulsion Laboratory</a>\n};\n\n","import React from 'react';\nimport Links from './../links';\n\nconst github = 'https://github.com/mkrauskopf/devstronomy/blob/master/';\n\nconst gitHubLink = (relPath, fileName) =>\n  <a href={github + 'data/' + relPath + fileName}><code className='link'>{fileName}</code></a>;\n\n// Placeholders used in the HTML below.\nconst planetCsvLink = gitHubLink('csv/', 'planets.csv');\nconst planetJsonLink = gitHubLink('json/', 'planets.json');\nconst satellitesCsvLink = gitHubLink('csv/', 'satellites.csv');\nconst satellitesJsonLink = gitHubLink('json/', 'satellites.json');\nconst datasetsSql = gitHubLink('sql/', 'devstronomy.sql');\n\nconst Datasets = () => {\n\n  return(\n    <div>\n      <h1 className='content'>Datasets section</h1>\n      <p>\n        Devstronomy project aims to provide datasets related to astronomy in an accessible format (CSV, JSON, SQL).\n      <p>\n\n      </p>\n        Currently, there are datasets for:\n          <ul>\n            <li>planets of our Solar System (+ Pluto)</li>\n            <li>natural satellites(moons) of all planets</li>\n          </ul>\n      </p>\n    \n\n      <hr id='tableofcontents'/>\n      <h2>Table of Contents</h2>\n      <ol>\n        <li><a href='#downloads'>Quick Downloads</a></li>\n        <li><a href='#information'>Datasets information</a></li>\n        <ol>\n          <li><a href='#planets'>Planets</a></li>\n          <li><a href='#satellites'>Planetary Satellites</a></li>\n        </ol>\n        <li><a href='#csv'>CSV files</a></li>\n        <li><a href='#json'>JSON files</a></li>\n        <li><a href='#sql'>SQL Dataset</a>\n          <ol>\n            <li><a href='#sql-examples'>SQL usage examples</a>\n              <ol>\n                <li><a href='#ten-moons-saturn'>Ten largest moons of Saturn</a></li>\n                <li><a href='#planets-ecc'>Planets ordered by eccentricity</a></li>\n                <li><a href='#moons-inconsistency'>Inconsistency in the number of moons</a></li>\n              </ol>\n            </li>\n          </ol>\n        </li>\n        <li><a href='#implementation'>Implementation notes</a></li>\n      </ol>\n\n\n      <hr id='downloads'/>\n      <h2>Quick Downloads</h2>\n\n      <table>\n        <thead>\n          <tr>\n            <th>Dataset</th>\n            <th>CSV</th>\n            <th>JSON</th>\n            <th>SQL</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Planets</td>\n            <td>{planetCsvLink}</td>\n            <td>{planetJsonLink}</td>\n            <td>{datasetsSql}</td>\n          </tr>\n          <tr>\n            <td>Satellites</td>\n            <td>{satellitesCsvLink}</td>\n            <td>{satellitesJsonLink}</td>\n            <td>{datasetsSql}</td>\n          </tr>\n        </tbody>\n      </table>\n\n\n      <hr id='information'/>\n      <h2>Datasets information</h2>\n\n      <h3 id='planets'>Planets</h3>\n\n      <p>\n        The {planetCsvLink} file contains information about planets in our Solar System including dwarf planet Pluto.\n        The source of data is <a href='https://nssdc.gsfc.nasa.gov/planetary/factsheet/'>Planetary Fact Sheet</a> from {Links.jpl}.\n      </p>\n\n\n      <h4>Fields and units in the planetary dataset</h4>\n\n      <p>See also official <a href='https://nssdc.gsfc.nasa.gov/planetary/factsheet/planetfact_notes.html'>Planetary\n      Fact Sheet Notes</a> for more information about individual fields.</p>\n\n      <ul>\n        <li>Mass (10<sup>24</sup>kg)</li>\n        <li>Diameter (km)</li>\n        <li>Density (kg/m<sup>3</sup>)</li>\n        <li>Gravity (m/s<sup>2</sup>)</li>\n        <li>Escape Velocity (km/s)</li>\n        <li>Rotation Period (hours)</li>\n        <li>Length of Day (hours)</li>\n        <li>Distance from Sun (10<sup>6</sup> km)</li>\n        <li>Perihelion (10<sup>6</sup> km)</li>\n        <li>Aphelion (10<sup>6</sup> km)</li>\n        <li>Orbital Period (days)</li>\n        <li>Orbital Velocity (km/s)</li>\n        <li>Orbital Inclination (degrees)</li>\n        <li>Orbital Eccentricity</li>\n        <li>Obliquity to Orbit (degrees)</li>\n        <li>Mean Temperature (C)</li>\n        <li>Surface Pressure (bars)</li>\n        <li>Number of Moons (number)</li>\n        <li>Ring System? (Yes/No)</li>\n        <li>Global Magnetic Field? (Yes/No)</li>\n      </ul>\n\n\n      <h3 id='satellites'>Planetary satellites (moons)</h3>\n      <p>\n        The {satellitesCsvLink} file contains information about planetary satellites (moons) of planets in our Solar\n        System. Moons of dwarf planet Pluto are included as well.\n        The source of data is <a href='https://ssd.jpl.nasa.gov/?sat_phys_par'>Planetary Satellite Physical\n        Parameters</a> from {Links.jpl}.\n      </p>\n\n      <h4>Fields and units in the satellites dataset</h4>\n\n      <ul>\n        <li><em>planet</em>: owning planet of the satellite</li>\n        <li><em>name</em>: name of the satellite</li>\n        <li><em>gm</em>: GM (km<sup>3</sup>/sec<sup>2</sup>)</li>\n        <li><em>radius</em>: Mean radius (km)</li>\n        <li><em>density</em>: Mean density (g/cm<sup>3</sup>)</li>\n        <li><em>magnitude</em>: Magnitude V<sub>0</sub> or R</li>\n        <li><em>albedo</em>: Geometric Albedo</li>\n      </ul>\n\n\n      <hr id='csv'/>\n      <h2>CSV (comma-separated values) files</h2>\n      <ul>\n        <li>{planetCsvLink}</li>\n        <li>{satellitesCsvLink}</li>\n      </ul>\n\n\n      <hr id='json'/>\n      <h2>JSON</h2>\n      <ul>\n        <li>{planetJsonLink}</li>\n        <li>{satellitesJsonLink}</li>\n      </ul>\n\n\n      <hr id='sql'/>\n      <h2>SQL Dataset</h2>\n\n      <p>The {datasetsSql} creates tables for planets and their satellites and fill them with\n      data from the CSV files <a href='#csv'>described above</a>.</p>\n\n      <p>For example for MySQL database following commands will create the database:</p>\n\n      <pre>{\n`mysqladmin -u [uname] -p[pass] create devstronomy\nmysql -u [uname] -p[pass] devstronomy &lt; data/sql/devstronomy.sql`}</pre>\n\n      <h3 id='sql-examples'>SQL usage examples</h3>\n\n      <h4 id='ten-moons-saturn'>Information about ten largest moons of Saturn</h4>\n\n      <pre>{\n`SELECT s.name, s.radius, s.density, s.albedo FROM satellite AS s\n     LEFT JOIN planet as p ON p.id = s.planet_id\n     WHERE p.name = 'Saturn'\n     ORDER BY s.radius DESC\n     LIMIT 10`}</pre>\n\n      { /* Table of satellites. */ }\n      <table>\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>radius</th>\n            <th>density</th>\n            <th>albedo</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Titan</td>\n            <td align='right'>2574.730000</td>\n            <td align='right'>1.882000</td>\n            <td align='right'>0.200000</td>\n          </tr>\n          <tr>\n            <td>Rhea</td>\n            <td align='right'>764.300000</td>\n            <td align='right'>1.233000</td>\n            <td align='right'>0.949000</td>\n          </tr>\n          <tr>\n            <td>Iapetus</td>\n            <td align='right'>735.600000</td>\n            <td align='right'>1.083000</td>\n            <td align='right'>0.600000</td>\n          </tr>\n          <tr>\n            <td>Dione</td>\n            <td align='right'>561.700000</td>\n            <td align='right'>1.476000</td>\n            <td align='right'>0.998000</td>\n          </tr>\n          <tr>\n            <td>Tethys</td>\n            <td align='right'>533.000000</td>\n            <td align='right'>0.973000</td>\n            <td align='right'>1.229000</td>\n          </tr>\n          <tr>\n            <td>Enceladus</td>\n            <td align='right'>252.100000</td>\n            <td align='right'>1.608000</td>\n            <td align='right'>1.375000</td>\n          </tr>\n          <tr>\n            <td>Mimas</td>\n            <td align='right'>198.200000</td>\n            <td align='right'>1.150000</td>\n            <td align='right'>0.962000</td>\n          </tr>\n          <tr>\n            <td>Hyperion</td>\n            <td align='right'>135.000000</td>\n            <td align='right'>0.544000</td>\n            <td align='right'>0.300000</td>\n          </tr>\n          <tr>\n            <td>Phoebe</td>\n            <td align='right'>106.500000</td>\n            <td align='right'>1.638000</td>\n            <td align='right'>0.081000</td>\n          </tr>\n          <tr>\n            <td>Janus</td>\n            <td align='right'>89.500000</td>\n            <td align='right'>0.630000</td>\n            <td align='right'>0.710000</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <h4 id='planets-ecc'>Planets ordered by eccentricity</h4>\n\n      <pre>SELECT name, orbital_eccentricity FROM planet ORDER BY orbital_eccentricity;</pre>\n\n      { /* Result of select: table of planets. */ }\n      <table>\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>orbital_eccentricity</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Venus</td>\n            <td align='right'>0.007000</td>\n          </tr>\n          <tr>\n            <td>Neptune</td>\n            <td align='right'>0.011000</td>\n          </tr>\n          <tr>\n            <td>Earth</td>\n            <td align='right'>0.017000</td>\n          </tr>\n          <tr>\n            <td>Uranus</td>\n            <td align='right'>0.046000</td>\n          </tr>\n          <tr>\n            <td>Jupiter</td>\n            <td align='right'>0.049000</td>\n          </tr>\n          <tr>\n            <td>Saturn</td>\n            <td align='right'>0.057000</td>\n          </tr>\n          <tr>\n            <td>Mars</td>\n            <td align='right'>0.094000</td>\n          </tr>\n          <tr>\n            <td>Mercury</td>\n            <td align='right'>0.205000</td>\n          </tr>\n          <tr>\n            <td>Pluto</td>\n            <td align='right'>0.244000</td>\n          </tr>\n        </tbody>\n      </table>\n\n      <h4 id='moons-inconsistency'>Inconsistency in the number of moons</h4>\n\n      <p>Note: the <code>planet.number_of_moons</code> does not reflect the number of records in the <code>satellite</code> table for Jupiter and\n      Saturn. See the SQL select below. (<em>TODO</em>: why)</p>\n\n      <pre>{\n`SELECT name, number_of_moons,\n    (SELECT COUNT(*) FROM satellite s WHERE p.id = s.planet_id) moons_in_table\n    FROM planet p;`}</pre>\n\n      <table>\n        <thead>\n          <tr>\n            <th>name</th>\n            <th>number_of_moons</th>\n            <th>moons_in_table</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Mercury</td>\n            <td align='right'>0</td>\n            <td align='right'>0</td>\n          </tr>\n          <tr>\n            <td>Venus</td>\n            <td align='right'>0</td>\n            <td align='right'>0</td>\n          </tr>\n          <tr>\n            <td>Earth</td>\n            <td align='right'>1</td>\n            <td align='right'>1</td>\n          </tr>\n          <tr>\n            <td>Mars</td>\n            <td align='right'>2</td>\n            <td align='right'>2</td>\n          </tr>\n          <tr>\n            <td><strong>Jupiter</strong></td>\n            <td align='right'><strong>79</strong></td>\n            <td align='right'><strong>67</strong></td>\n          </tr>\n          <tr>\n            <td><strong>Saturn</strong></td>\n            <td align='right'><strong>62</strong></td>\n            <td align='right'><strong>61</strong></td>\n          </tr>\n          <tr>\n            <td>Uranus</td>\n            <td align='right'>27</td>\n            <td align='right'>27</td>\n          </tr>\n          <tr>\n            <td>Neptune</td>\n            <td align='right'>14</td>\n            <td align='right'>14</td>\n          </tr>\n          <tr>\n            <td>Pluto</td>\n            <td align='right'>5</td>\n            <td align='right'>5</td>\n          </tr>\n        </tbody>\n      </table>\n\n\n      <hr id='implementation'/>\n      <h2>Implementation notes</h2>\n\n      <h3>SQL notes</h3>\n      \n      <p>The data are converted from CSV files to SQL schema with the <a href='jconverter'>JConverter tool</a>. The\n      final {datasetsSql} dump is then created via <code>mysqldump</code>:</p>\n\n      <pre>mysqldump -u [uname] -p[pass] devstronomy &gt; data/sql/devstronomy.sql</pre>\n\n      <h3>CSV notes</h3>\n\n      <h4>Transpose Python script</h4>\n\n      <pre>{\n`import pandas as pd\np = pd.read_csv('planets-nasa-export.csv', sep=';')\np.T.to_csv('planets.csv', header=False)`}</pre>\n\n    </div>\n  );\n};\n\nexport default Datasets;\n\n\n","import React from 'react';\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\nimport Route from 'react-router-dom/Route';\n\nimport Planets from './components/Planets';\nimport Datasets from './components/Datasets';\nimport Links from './links';\n\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport { MuiThemeProvider, createMuiTheme, withStyles } from '@material-ui/core/styles';\nimport grey from '@material-ui/core/colors/grey';\nimport amber from '@material-ui/core/colors/amber';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst theme = createMuiTheme({\n  palette: {\n    type: 'dark',\n    primary: { main: grey[900] },\n    secondary: { main: amber[500] },\n  }\n});\n\nconst styles = theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  launchIcon: {\n    width: 13,\n    height: 13,\n    color: '#66a',\n  },\n});\n\nconst PlanetsContent = () => {\n  return (\n    <div>\n      <div className='contentCenter'>\n        This is an interactive version of <a href='https://nssdc.gsfc.nasa.gov/planetary/factsheet/'>Planetary Fact\n        Sheet</a> and <a href='https://ssd.jpl.nasa.gov/?sat_phys_par'>Planetary Satellite Physical Parameters</a>\n        &nbsp;datasets from {Links.jpl}. See <Link to='/datasets'>datasets section</Link> for more details.\n        <p>\n          <span className='highlight'>Select the planet below</span> to see only its satellites.\n        </p>\n      </div>\n\n      <hr/>\n      <div className='content'>\n        <span className='warning'>Note:</span> the following is not migrated from original satellite dataset yet:\n        <ul>\n          <li>For <em>Magnitude</em> column in satellites dataset V<sub>0</sub> or R are not distinguished.</li>\n          <li>\n            <em>Uncertainties</em> for some values. For example, for original value <code>13.70±0.04</code> in JPL\n            dataset we have just <code>13.70</code> without <code>0.04</code> uncertainty.\n          </li>\n        </ul>\n      </div>\n\n      <hr/>\n      <div className='planets'>\n        <Planets/>\n      </div>\n    </div>\n  );\n};\n\nconst DatasetsContent = () => {\n  return (\n    <div className='datasets'>\n      <Datasets/>\n    </div>\n  );\n};\n\nconst App = (props) => {\n\n  const { classes } = props;\n  return (\n    <Router>\n      <MuiThemeProvider theme={theme}>\n        <div>\n\n          <div className={classes.root}>\n            <AppBar position='static'>\n              <Toolbar variant='dense'>\n\n                <Button variant='text' className={classes.button} component={Link} to='/planets'>\n                  Planets & Satellites\n                </Button>\n                <Button variant='text' className={classes.button} component={Link} to='/datasets'>\n                  Datasets\n                </Button>\n\n                <div className={classes.grow} />\n\n                <Button variant='text'\n                        className={classes.button}\n                        target='_blank'\n                        href='https://github.com/mkrauskopf/devstronomy/'>\n                  GitHub&nbsp;<LaunchIcon className={classes.launchIcon} />\n                </Button>\n\n              </Toolbar>\n            </AppBar>\n          </div>\n\n          <Route path='/' exact component={PlanetsContent} />\n          <Route path='/planets/' component={PlanetsContent} />\n          <Route path='/datasets/' component={DatasetsContent} />\n\n        </div>\n      </MuiThemeProvider>\n    </Router>\n  );\n\n};\n\nApp.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}